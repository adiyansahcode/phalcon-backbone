<?php

namespace Pbackbone\Model;

use Phalcon\Mvc\Model\Relation;

/**
 * RobotModel
 * @package Pbackbone\Models
 * @autogenerated by Phalcon Developer Tools
 * @date 2020-03-12, 06:15:34
 */
class RobotModel extends \Phalcon\Mvc\Model
{

    /**
     *
     * @var integer
     * @Primary
     * @Identity
     * @Column(column="id", type="integer", length=10, nullable=false)
     */
    protected $id;

    /**
     *
     * @var string
     * @Column(column="created_at", type="string", nullable=true)
     */
    protected $createdAt;

    /**
     *
     * @var string
     * @Column(column="updated_at", type="string", nullable=true)
     */
    protected $updatedAt;

    /**
     *
     * @var string
     * @Column(column="name", type="string", length=50, nullable=true)
     */
    protected $name;

    /**
     *
     * @var string
     * @Column(column="description", type="string", nullable=true)
     */
    protected $description;

    /**
     *
     * @var integer
     * @Column(column="year", type="integer", length=10, nullable=true)
     */
    protected $year;

    /**
     *
     * @var string
     * @Column(column="is_active", type="string", length='yes','no', nullable=true)
     */
    protected $isActive;

    /**
     *
     * @var integer
     * @Column(column="type_id", type="integer", length=10, nullable=true)
     */
    protected $typeId;


    /**
     * Method to set the value of field id
     *
     * @param integer $id
     * @return RobotModel
     */
    public function setId(int $id): RobotModel
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Method to set the value of field created_at
     *
     * @param string $createdAt
     * @return RobotModel
     */
    public function setCreatedAt(string $createdAt): RobotModel
    {
        $this->createdAt = $createdAt;

        return $this;
    }

    /**
     * Method to set the value of field updated_at
     *
     * @param string $updatedAt
     * @return RobotModel
     */
    public function setUpdatedAt(string $updatedAt): RobotModel
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Method to set the value of field name
     *
     * @param string $name
     * @return RobotModel
     */
    public function setName(string $name): RobotModel
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Method to set the value of field description
     *
     * @param string $description
     * @return RobotModel
     */
    public function setDescription(string $description): RobotModel
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Method to set the value of field year
     *
     * @param integer $year
     * @return RobotModel
     */
    public function setYear(int $year): RobotModel
    {
        $this->year = $year;

        return $this;
    }

    /**
     * Method to set the value of field is_active
     *
     * @param string $isActive
     * @return RobotModel
     */
    public function setIsActive(string $isActive): RobotModel
    {
        $this->isActive = $isActive;

        return $this;
    }

    /**
     * Method to set the value of field type_id
     *
     * @param integer $typeId
     * @return RobotModel
     */
    public function setTypeId(?int $typeId): RobotModel
    {
        $this->typeId = $typeId;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId(): int
    {
        return (int) $this->id;
    }

    /**
     * Returns the value of field createdAt
     *
     * @return string
     */
    public function getCreatedAt(): string
    {
        return (string) $this->createdAt;
    }

    /**
     * Returns the value of field updatedAt
     *
     * @return string
     */
    public function getUpdatedAt(): string
    {
        return (string) $this->updatedAt;
    }

    /**
     * Returns the value of field name
     *
     * @return string
     */
    public function getName(): string
    {
        return (string) $this->name;
    }

    /**
     * Returns the value of field description
     *
     * @return string
     */
    public function getDescription(): string
    {
        return (string) $this->description;
    }

    /**
     * Returns the value of field year
     *
     * @return integer
     */
    public function getYear(): int
    {
        return (int) $this->year;
    }

    /**
     * Returns the value of field isActive
     *
     * @return string
     */
    public function getIsActive(): string
    {
        return (string) $this->isActive;
    }

    /**
     * Returns the value of field typeId
     *
     * @return integer|null
     */
    public function getTypeId(): ?int
    {
        return $this->typeId;
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->setSchema("phalcon-backbone");
        $this->setSource("robot");

        $this->addBehavior(
            new \Phalcon\Mvc\Model\Behavior\Timestampable(
                [
                    'beforeCreate' => [
                        'field'  => 'createdAt',
                        'format' => 'Y-m-d H:i:s',
                    ],
                    'beforeUpdate' => [
                        'field'  => 'updatedAt',
                        'format' => 'Y-m-d H:i:s',
                    ],
                ]
            )
        );

        // * Sets a list of attributes that must be skipped from the generated INSERT statement
        $this->skipAttributesOnCreate(
            [
                'updatedAt',
            ]
        );

        // * Sets a list of attributes that must be skipped from the generated UPDATE statement
        $this->skipAttributesOnUpdate(
            [
                'createdAt',
            ]
        );

        // * Sets if a model must use dynamic update instead of the all-field update
        $this->useDynamicUpdate(true);

        $this->hasManyToMany(
            'id',
            '\Pbackbone\Model\RobotPartModel',
            'robotId',
            'partId',
            '\Pbackbone\Model\PartModel',
            'id',
            [
                'alias' => 'part',
                'reusable' => true,
            ]
        );

        $this->hasMany(
            'id',
            '\Pbackbone\Model\RobotPartModel',
            'robotId',
            [
                'alias' => 'robotPart',
                'reusable' => true,
                'foreignKey' => [
                    'action' => Relation::ACTION_CASCADE,
                ],
            ]
        );

        $this->belongsTo(
            'typeId',
            '\Pbackbone\Model\TypeModel',
            'id',
            [
                'alias' => 'type',
                'reusable' => true,
                'foreignKey' => [
                    'allowNulls' => true,
                    'message' => "relation id doesn't exist",
                ],
            ]
        );
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return [
            'id' => 'id',
            'created_at' => 'createdAt',
            'updated_at' => 'updatedAt',
            'name' => 'name',
            'description' => 'description',
            'year' => 'year',
            'is_active' => 'isActive',
            'type_id' => 'typeId'
        ];
    }
}
